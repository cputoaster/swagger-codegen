class {{classname}} {
  {{#vars}}{{#description}}/* {{{description}}} */{{/description}}
  {{{datatype}}} {{name}} = {{{defaultValue}}};
  {{#allowableValues}}{{#min}} // range from {{min}} to {{max}}{{/min}}//{{^min}}enum {{name}}Enum { {{#values}} {{.}}, {{/values}} };{{/min}}{{/allowableValues}}
  {{/vars}}
  {{classname}}();

  @override
  String toString() {
    return '{{classname}}[{{#vars}}{{name}}=${{name}}, {{/vars}}]';
  }

  {{classname}}.fromJson(Map<String, dynamic> json) {
    if (json == null) return;
  {{#vars}}
  {{#isDateTime}}
    {{name}} = json['{{name}}'] == null ? null : DateTime.parse(json['{{name}}']);
  {{/isDateTime}}
  {{^isDateTime}}
    {{name}} =
    {{#complexType}}
        {{#isListContainer}}
            {{#items}}
                {{#isPrimitiveType}}
                    new List<{{{datatype}}}>();
                    json['{{name}}'].foreach((dynamic value) => {{name}}.add(json[value]));
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                    {{#isListContainer}}
                        {{#items}}
                            {{#isPrimitiveType}}
            new List<List<{{{datatype}}}>>();
            json['{{name}}'].foreach((dynamic value) {
                var item = new List<{{{datatype}}}>();
                {{name}}.add(item);
                value.foreach((dynamic value2) =>
                    item.add(json[value]));
            });
                            {{/isPrimitiveType}}
                            {{^isPrimitiveType}}
                                {{#isListContainer}}
            new List<List<List<{{complexType}}>>>();
            json['{{name}}'].foreach((dynamic value) {
                var item = new List<List<{{complexType}}>>();
                {{name}}.add(item);
                value.foreach((dynamic value2) =>
                    item.add({{complexType}}.listFromJson(json[value])));
            });

                                {{/isListContainer}}
                                {{^isListContainer}}
                                    new List<List<{{complexType}}>>();
                                    json['{{name}}'].foreach((dynamic value) => {{name}}.add({{complexType}}.listFromJson(json[value])));
                                {{/isListContainer}}
                            {{/isPrimitiveType}}
                        {{/items}}
                    {{/isListContainer}}
                    {{^isListContainer}}
                        {{complexType}}.listFromJson(json['{{name}}']);
                    {{/isListContainer}}
                {{/isPrimitiveType}}

            {{/items}}
        {{/isListContainer}}
        {{^isListContainer}}
            {{#isMapContainer}}{{complexType}}.mapFromJson(json['{{name}}']);{{/isMapContainer}}
            {{^isMapContainer}}new {{complexType}}.fromJson(json['{{name}}']);{{/isMapContainer}}
        {{/isListContainer}}
    {{/complexType}}
    {{^complexType}}json['{{name}}'];{{/complexType}}
  {{/isDateTime}}
  {{/vars}}
  }

  Map<String, dynamic> toJson() {
    return {
    {{#vars}}
      {{#isDateTime}}'{{name}}': {{name}} == null ? '' : {{name}}.toUtc().toIso8601String(){{^-last}},{{/-last}}{{/isDateTime}}{{^isDateTime}}'{{name}}': {{name}}{{^-last}},{{/-last}}{{/isDateTime}}
    {{/vars}}
     };
  }

  static List<{{classname}}> listFromJson(List<Map<String, dynamic>> json) {
    var list = new List<{{classname}}>();
    if (json != null && json.length > 0) {
      json.forEach((Map<String, dynamic> value) => list.add(new {{classname}}.fromJson(value)));
    }
    return list;
  }

  static Map<String, {{classname}}> mapFromJson(Map<String, Map<String, dynamic>> json) {
    var map = new Map<String, {{classname}}>();
    if (json != null && json.length > 0) {
      json.forEach((String key, Map<String, dynamic> value) => map[key] = new {{classname}}.fromJson(value));
    }
    return map;
  }
}
