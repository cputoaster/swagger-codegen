class {{classname}} {
    /// The underlying value of this enum member.
    final {{dataType}} value;

    const {{classname}}._internal(this.value);

{{#allowableValues}}
    {{#enumVars}}
        {{#description}}
            /// {{description}}
        {{/description}}
        static const {{classname}} {{name}} = const {{classname}}._internal({{{value}}});
    {{/enumVars}}
{{/allowableValues}}

    @override
    String toString() {
        return '{{classname}}[value=$value]';
    }

    factory {{classname}}.fromJson(String jsonString) {
        if (jsonString == null)
            return null;

        switch (jsonString) {
            {{#allowableValues}}
                {{#enumVars}}
            case {{{value}}}: return {{name}};
                {{/enumVars}}
            {{/allowableValues}}
            default: throw('Unknown enum value to decode: $jsonString');
        }
    }

    String toJson() {
        return value;
    }

    static List<{{classname}}> listFromJson(List<String> json) {
        var list = new List<{{classname}}>();
        if (json != null && json.length > 0) {
            json.forEach((String value) => list.add(new {{classname}}.fromJson(value)));
        }
        return list;
    }

}

